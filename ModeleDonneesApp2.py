import json

# -------------------------------------------------------------------------------
# --- class ModeleDonnees
# -------------------------------------------------------------------------------

class ModeleDonnees:
    def __init__(self, chemin_produits):
        self.chemin_produits = chemin_produits
        self.produits = self.charger_produits()
        self.positions = []  # Liste des tuples (produit_id, x, y)
        self.positions_valides = [ # Liste des positions valides sur le plan
            (4, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0),
            (3, 1), (4, 1), (5, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1),
            (2, 2), (3, 2), (4, 2), (5,2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2), (35, 2), (36, 2), (37, 2), (38, 2), (39, 2), (40, 2), (41, 2), (42, 2), (43, 2), (44, 2), (45, 2), (46, 2), (47, 2), (48, 2), (49, 2), (50, 2), (51, 2), (52, 2), (53, 2), (54, 2), (55, 2), (56, 2), (57, 2),
            (1, 3), (2, 3), (3, 3), (4, 3), (35, 3), (36, 3), (37, 3), (38, 3), (39, 3), (40, 3), (41, 3), (42, 3), (43, 3), (44, 3), (45, 3), (46, 3), (47, 3), (48, 3), (49, 3), (50, 3), (51, 3), (52, 3), (53, 3), (54, 3), (55, 3), (56, 3), (57, 3),
            (1, 4), (2, 4), (3, 4), 
            (1, 5), (2, 5), (8, 5), (9, 5), (10, 5), (12, 5), (13, 5), (14, 5), (16, 5), (17, 5), (18, 5), (20, 5), (21, 5), (22, 5), (24, 5), (25, 5), (26, 5), (28, 5), (29, 5), (30, 5), (32, 5), (33, 5), (34, 5), (35, 5), (36, 5), (37, 5), (39, 5), (41, 5), (42, 5), (43, 5), (48, 5), (49, 5), (50, 5), (51, 5), (52, 5), (53, 5), (54, 5), (55, 5), (56, 5), (57, 5), (60, 5),
            (1, 6), (2, 6), (4, 6), (5, 6), (6, 6), (8, 6), (9, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6), (17, 6), (18, 6), (20, 6), (21, 6), (22, 6), (24, 6), (25, 6), (26, 6), (28, 6), (29, 6), (30, 6), (32, 6), (33, 6), (34, 6), (35, 6), (36, 6), (37, 6), (39, 6), (41, 6), (42, 6), (43, 6), (48, 6), (49, 6), (50, 6), (51, 6), (52, 6), (53, 6), (54, 6), (55, 6), (56, 6), (57, 6), (60, 6),
            (1, 7), (2, 7), (4, 7), (5, 7), (6, 7), (8, 7), (9, 7), (10, 7), (12, 7), (13, 7), (14, 7), (16, 7), (17, 7), (18, 7), (20, 7), (21, 7), (22, 7), (24, 7), (25, 7), (26, 7), (28, 7), (29, 7), (30, 7), (32, 7), (33, 7), (34, 7), (35, 7), (36, 7), (37, 7), (39, 7), (41, 7), (42, 7), (43, 7), (60, 7),
            (1, 8), (2, 8), (4, 8), (5, 8), (6, 8), (8, 8), (9, 8), (10, 8), (12, 8), (13, 8), (14, 8), (16, 8), (17, 8), (18, 8), (20, 8), (21, 8), (22, 8), (24, 8), (25, 8), (26, 8), (28, 8), (29, 8), (30, 8), (32, 8), (33, 8), (34, 8), (35, 8), (36, 8), (37, 8), (39, 8), (41, 8), (42, 8), (43, 8), (48, 8), (49, 8), (50, 8), (51, 8), (52, 8), (53, 8), (54, 8), (55, 8), (56, 8), (57, 8), (60, 8),
            (1, 9), (2, 9), (4, 9), (5, 9), (6, 9), (8, 9), (9, 9), (10, 9), (12, 9), (13, 9), (14, 9), (16, 9), (17, 9), (18, 9), (20, 9), (21, 9), (22, 9), (24, 9), (25, 9), (26, 9), (28, 9), (29, 9), (30, 9), (32, 9), (33, 9), (34, 9), (35, 9), (36, 9), (37, 9), (39, 9), (41, 9), (42, 9), (43, 9), (48, 9), (49, 9), (50, 9), (51, 9), (52, 9), (53, 9), (54, 9), (55, 9), (56, 9), (57, 9), (60, 9),
            (1, 10), (2, 10), (4, 10), (5, 10), (6, 10), (8, 10), (9, 10), (10, 10), (12, 10), (13, 10), (14, 10), (16, 10), (17, 10), (18, 10), (20, 10), (21, 10), (22, 10), (24, 10), (25, 10), (26, 10), (28, 10), (29, 10), (30, 10), (32, 10), (33, 10), (34, 10), (35, 10), (36, 10), (37, 10), (39, 10), (41, 10), (42, 10), (43, 10), (60, 10),
            (1, 11), (2, 11), (4, 11), (5, 11), (6, 11), (8, 11), (9, 11), (10, 11), (12, 11), (13, 11), (14, 11), (16, 11), (17, 11), (18, 11), (20, 11), (21, 11), (22, 11), (24, 11), (25, 11), (26, 11), (28, 11), (29, 11), (30, 11), (32, 11), (33, 11), (34, 11), (35, 11), (36, 11), (37, 11), (39, 11), (41, 11), (42, 11), (43, 11), (48, 11), (49, 11), (50, 11), (51, 11), (52, 11), (53, 11), (54, 11), (55, 11), (56, 11), (57, 11), (60, 11),
            (1, 12), (2, 12), (4, 12), (5, 12), (6, 12), (8, 11), (9, 12), (10, 12), (12, 12), (13, 12), (14, 12), (16, 12), (17, 12), (18, 12), (20, 12), (21, 12), (22, 12), (24, 12), (25, 12), (26, 12), (28, 12), (29, 12), (30, 12), (32, 12), (33, 12), (34, 12), (35, 12), (36, 12), (37, 12), (39, 12), (41, 12), (42, 12), (43, 12), (48, 12), (49, 12), (50, 12), (51, 12), (52, 12), (53, 12), (54, 12), (55, 12), (56, 12), (57, 12), (60, 12),
            (1, 13), (2, 13), (4, 13), (5, 13), (6, 13), (8, 13), (9, 13), (10, 13), (12, 13), (13, 13), (14, 13), (20, 13), (21, 13), (22, 13), (28, 13), (29, 13), (30, 13), (32, 13), (33, 13), (34, 13), (35, 13), (36, 13), (37, 13), (41, 13), (42, 13), (43, 13), (60, 13),
            (1, 14), (2, 14), (4, 14), (5, 14), (6, 14), (8, 14), (9, 14), (10, 14), (12, 14), (13, 14), (14, 14), (20, 14), (21, 14), (22, 14), (24, 14), (25, 14), (26, 14), (28, 14), (29, 14), (30, 14), (32, 14), (33, 14), (34, 14), (35, 14), (36, 14), (37, 14), (39, 14), (41, 14), (42, 14), (43, 14), (48, 14), (49, 14), (50, 14), (51, 14), (52, 14), (53, 14), (54, 14), (55, 14), (56, 14), (57, 14), (60, 14),
            (1, 15), (2, 15), (4, 15), (5, 15), (6, 15), (8, 15), (9, 15), (10, 15), (12, 15), (13, 15), (14, 15), (16, 15), (17, 15), (18, 15), (20, 15), (21, 15), (22, 15), (24, 15), (25, 15), (26, 15), (28, 15), (29, 15), (30, 15), (32, 15), (33, 15), (34, 15), (35, 15), (36, 15), (37, 15), (39, 15), (41, 15), (42, 15), (43, 15), (48, 15), (49, 15), (50, 15), (51, 15), (52, 15), (53, 15), (54, 15), (55, 15), (56, 15), (57, 15), (60, 15),
            (1, 16), (2, 16), (4, 16), (5, 16), (6, 16), (8, 16), (9, 16), (10, 16), (12, 16), (13, 16), (14, 16), (16, 16), (17, 16), (18, 16), (20, 16), (21, 16), (22, 16), (24, 16), (25, 16), (26, 16), (28, 16), (29, 16), (30, 16), (32, 16), (33, 16), (34, 16), (35, 16), (36, 16), (37, 16), (39, 16), (41, 16), (42, 16), (43, 16), (60, 16),
            (1, 17), (2, 17), (4, 17), (5, 17), (6, 17), (8, 17), (9, 17), (10, 17), (12, 17), (13, 17), (14, 17), (16, 17), (17, 17), (18, 17), (20, 17), (21, 17), (22, 17), (24, 17), (25, 17), (26, 17), (28, 17), (29, 17), (30, 17), (32, 17), (33, 17), (34, 17), (35, 17), (36, 17), (37, 17), (39, 17), (41, 17), (42, 17), (43, 17), (48, 17), (49, 17), (50, 17), (51, 17), (52, 17), (53, 17), (54, 17), (55, 17), (56, 17), (57, 17), (60, 17),
            (1, 18), (2, 18), (4, 18), (5, 18), (6, 18), (8, 18), (9, 18), (10, 18), (12, 18), (13, 18), (14, 18), (16, 18), (17, 18), (18, 18), (20, 18), (21, 18), (22, 18), (24, 18), (25, 18), (26, 18), (28, 18), (29, 18), (30, 18), (32, 18), (33, 18), (34, 18), (35, 18), (36, 18), (37, 18), (39, 18), (41, 18), (42, 18), (43, 18), (48, 18), (49, 18), (50, 18), (51, 18), (52, 18), (53, 18), (54, 18), (55, 18), (56, 18), (57, 18), (60, 18),
            (1, 19), (2, 19), (4, 19), (5, 19), (6, 19), (8, 19), (9, 19), (10, 19), (12, 19), (13, 19), (14, 19), (16, 19), (17, 19), (18, 19), (20, 19), (21, 19), (22, 19), (24, 19), (25, 19), (26, 19), (28, 19), (29, 19), (30, 19), (32, 19), (33, 19), (34, 19), (35, 19), (36, 19), (37, 19), (39, 19), (41, 19), (42, 19), (43, 19), (60, 19),
            (1, 20), (2, 20), (4, 20), (5, 20), (6, 20), (8, 20), (9, 20), (10, 20), (12, 20), (13, 20), (14, 20), (16, 20), (17, 20), (18, 20), (20, 20), (21, 20), (22, 20), (24, 20), (25, 20), (26, 20), (28, 20), (29, 20), (30, 20), (32, 20), (33, 20), (34, 20), (35, 20), (36, 20), (37, 20), (39, 20), (41, 20), (42, 20), (43, 20), (48, 20), (49, 20), (50, 20), (51, 20), (52, 20), (53, 20), (54, 20), (55, 20), (56, 20), (57, 20), (60, 20),
            (48, 21), (49, 21), (50, 21), (51, 21), (52, 21), (53, 21), (54, 21), (55, 21), (56, 21), (57, 21), (60, 21),
            (60, 22),
            (48, 23), (49, 23), (50, 23), (51, 23), (52, 23), (53, 23), (54, 23), (55, 23), (56, 23), (57, 23), (60, 23),
            (1,24), (2,24), (4,24), (5,24), (6,24), (8,24), (9,24),(11,24), (12,24),(14,24),(15,24),(18,24),(21,24),(23,24),(24,24),(25,24),(27,24),(28,24),(30,24),(31,24),(33,24),(34,24),(35,24),(36,24),(39,24),(41,24),(42,24),(43,24), (49,24),(50,24),(51,24),(52,24),(53,24),(56,24),(57,24), (60,24),
            (1,25), (2,25), (4,25), (5,25), (6,25), (8,25), (9,25),(11,25), (12,25),(14,25),(15,25),(18,25),(21,25),(23,25),(24,25),(25,25),(27,25),(28,25),(30,25),(31,25),(33,25),(34,25),(35,25),(36,25),(39,25),(41,25),(42,25),(43,25), (60,25),
            (1,26), (2,26), (4,26), (5,26), (6,26), (8,26), (9,26),(11,26), (12,26),(14,26),(15,26),(18,26),(21,26),(23,26),(24,26),(25,26),(27,26),(28,26),(30,26),(31,26),(33,26),(34,26),(35,26),(36,26),(39,26),(41,26),(42,26),(43,26), (49,26),(50,26),(51,26),(52,26),(53,26),(56,26),(57,26),(60,26),
            (1,27), (2,27), (4,27), (5,27), (6,27), (8,27), (9,27),(11,27), (12,27),(14,27),(15,27),(18,27),(21,27),(23,27),(24,27),(25,27),(27,27),(28,27),(30,27),(31,27),(33,27),(34,27),(35,27),(36,27),(39,27),(41,27),(42,27),(43,27), (49,27),(50,27),(51,27),(52,27),(53,27),(56,27),(57,27),(60,27),
            (1,28), (2,28), (4,28), (5,28), (6,28), (8,28), (9,28),(11,28), (12,28),(14,28),(15,28),(18,28),(21,28),(23,28),(24,28),(25,28),(27,28),(28,28),(30,28),(31,28),(33,28),(34,28),(35,28),(36,28),(39,28),(41,28),(42,28),(43,28),(60,28),
            (1,29), (2,29), (4,29), (5,29), (6,29), (8,29), (9,29),(11,29), (12,29),(14,29),(15,29),(18,29),(21,29),(23,29),(24,29),(25,29),(27,29),(28,29),(30,29),(31,29),(33,29),(34,29),(35,29),(39,29),(41,29),(42,29),(43,29),(49,29),(50,29),(51,29),(52,29),(53,29),(56,29),(57,29),(60,29),
            (1,30),(2,30), (4,30), (5,30), (6,30), (23,30), (24,30), (25,30), (33,30), (36,30), (41,30), (42,30), (43,30), (49,30), (50,30), (51,30), (52,30), (53,30), (54,30), (55,30), (56,30), (57,30), (60,30),
            (1,31), (2,31), (4,31), (5,31), (6,31), (8,31), (9,31),(11,31), (12,31),(14,31),(15,31),(18,31),(21,31),(23,31),(24,31),(25,31),(27,31),(28,31),(30,31),(31,31),(33,31),(34,31),(35,31),(36,31),(39,31),(41,31),(42,31),(43,31),(60,31),
            (1,32), (2,32), (4,32), (5,32), (6,32), (8,32), (9,32),(11,32), (12,32),(14,32),(15,32),(18,32),(21,32),(23,32),(24,32),(25,32),(27,32),(28,32),(30,32),(31,32),(33,32),(34,32),(35,32),(36,32),(39,32),(41,32),(42,32),(43,32),(49,32),(50,32),(51,32),(52,32),(53,32),(56,32),(57,32),(60,32),
            (1,33), (2,33), (4,33), (5,33), (6,33), (8,33), (9,33),(11,33), (12,33),(14,33),(15,33),(18,33),(21,33),(23,33),(24,33),(25,33),(27,33),(28,33),(30,33),(31,33),(33,33),(36,33),(39,33),(41,33),(42,33),(43,33),(49,33),(50,33),(51,33),(52,33),(53,33),(56,33),(57,33),(60,33),
            (1,34), (2,34), (4,34), (5,34), (6,34), (8,34), (9,34),(11,34), (12,34),(14,34),(15,34),(18,34),(21,34),(23,34),(24,34),(25,34),(27,34),(28,34),(30,34),(31,34),(39,34),(41,34),(42,34),(43,34),(60,34),
            (1,35), (2,35), (4,35), (5,35), (6,35), (8,35), (9,35),(11,35), (12,35),(14,35),(15,35),(18,35),(21,35),(23,35),(24,35),(25,35),(27,35),(28,35),(30,35),(31,35),(39,35),(41,35),(42,35),(43,35),(49,35),(50,35),(51,35),(52,35),(53,35),(54,35),(56,35),(57,35),(60,35), 
            (1,36),(2,36), (4,36), (5,36), (6,36), (8,36), (9,36),(11,36), (12,36),(14,36),(15,36),(18,36),(21,36),(23,36),(24,36),(25,36),(27,36),(28,36),(30,36),(31,36),(39,36),(41,36),(42,36),(43,36),(49,36),(50,36),(51,36),(52,36),(53,36),(54,36),(56,36),(57,36),(60,36),
            (1,37), (2,37),(4,37), (5,37), (6,37), (8,37), (9,37),(11,37), (12,37),(14,37),(15,37),(18,37),(21,37),(23,37),(24,37),(25,37),(27,37),(28,37),(30,37),(31,37),(39,37),(41,37),(42,37),(43,37),(60,37),
            (1,38), (2,38), (49,38), (50,38), (51,38), (52,38), (53,38), (54,38), (55,38), (56,38), (57,38),(60,38),
            (1,39), (49,39), (50,39), (51,39), (52,39), (53,39), (54,39), (55,39), (56,39), (57,39),(60,39),
            (1,40), (2,40), (12,40), (13,40),(60,40),
            (1,41), (2,41),(12,41),(13,41),(49,41),(50,41),(51,41),(52,41),(53,41),(54,41),(55,41),(56,41),(57,41),(58,41),(59,41),(60,41),
            (1,42),(2, 42), (3, 42), (4, 42), (5, 42), (6, 42), (7, 42), (8, 42), (9, 42), (10, 42), (11, 42), (12, 42), (13, 42),
        ]

    def charger_produits(self):
        """Charge les produits depuis un fichier JSON."""
        try:
            with open(self.chemin_produits, "r", encoding="utf-8") as f:
                produits = json.load(f)
            return produits
        except Exception as e:
            print(f"Erreur lors du chargement des produits : {e}")
            return []

    def ajouter_produit_position(self, produit_id, x, y):
        """Ajoute un produit à une position si celle-ci est valide et non prise."""
        if not self.position_valide(x, y):
            print(f"Position ({x},{y}) non valide.")
            return False
        if self.position_occupee(x, y):
            print(f"Position ({x},{y}) déjà occupée.")
            return False
        self.positions.append({"id": produit_id, "x": x, "y": y})
        return True

    def position_valide(self, x, y):
        """Vérifie si la position est dans la liste des positions valides."""
        return (x, y) in self.positions_valides

    def position_occupee(self, x, y):
        """Vérifie si une position est déjà occupée par un produit."""
        for pos in self.positions:
            if pos["x"] == x and pos["y"] == y:
                return True
        return False

    def deplacer_produit(self, produit_id, new_x, new_y):
        """Déplace un produit à une nouvelle position si possible."""
        if not self.position_valide(new_x, new_y):
            print(f"Nouvelle position ({new_x},{new_y}) non valide.")
            return False
        if self.position_occupee(new_x, new_y):
            print(f"Nouvelle position ({new_x},{new_y}) déjà occupée.")
            return False
        for pos in self.positions:
            if pos["id"] == produit_id:
                pos["x"] = new_x
                pos["y"] = new_y
                return True
        print(f"Produit {produit_id} non trouvé.")
        return False

    def supprimer_produit(self, produit_id):
        """Supprime un produit de la liste des positions."""
        for pos in self.positions:
            if pos["id"] == produit_id:
                self.positions.remove(pos)
                return True
        print(f"Produit {produit_id} non trouvé pour suppression.")
        return False

    def exporter_positions(self, chemin_fichier):
        """Exporte la liste des positions au format JSON dans un fichier."""
        try:
            with open(chemin_fichier, "w", encoding="utf-8") as f:
                json.dump(self.positions, f, indent=4)
            return True
        except Exception as e:
            print(f"Erreur lors de l'export des positions : {e}")
            return False

    def charger_positions(self, chemin_fichier):
        """Charge une liste de positions depuis un fichier JSON."""
        try:
            with open(chemin_fichier, "r", encoding="utf-8") as f:
                self.positions = json.load(f)
            return True
        except Exception as e:
            print(f"Erreur lors du chargement des positions : {e}")
            return False

    def get_categories(self):
        """Retourne la liste des catégories uniques"""
        categories = set()
        for produit in self.produits:
            if "categorie" in produit:
                categories.add(produit["categorie"])
        return sorted(categories)

    def get_produits_par_categorie(self, categorie):
        """Retourne les produits d'une catégorie spécifique"""
        return [p["id"] for p in self.produits if p.get("categorie") == categorie]

    def ajouter_position(self, produit_id, x, y):
        """Alias pour ajouter_produit_position"""
        return self.ajouter_produit_position(produit_id, x, y)

    def charger_magasin(self, data):
        """Charge les données du magasin depuis un dictionnaire"""
        try:
            if "positions" in data:
                self.positions = data["positions"]
                return True
            return False
        except Exception as e:
            print(f"Erreur lors du chargement du magasin : {e}")
            return False

    def get_produits_coordonne(self, x, y):
        """Retourne les produits à une coordonnée donnée"""
        return [pos["id"] for pos in self.positions if pos["x"] == x and pos["y"] == y]

    def supprimer_produit_coordonne(self, produit_id, x, y):
        """Supprime un produit à une position spécifique"""
        for pos in self.positions[:]:
            if pos["id"] == produit_id and pos["x"] == x and pos["y"] == y:
                self.positions.remove(pos)
                return True
        return False

    def vider_case(self, x, y):
        """Vide une case de tous ses produits"""
        self.positions = [pos for pos in self.positions if not (pos["x"] == x and pos["y"] == y)]
        
    def rechercher_emplacement_libre(self, nom_produit):
        # Trouver le produit correspondant au nom
        produit_id = None
        for p in self.produits:
            if p["nom"].lower() == nom_produit.lower():
                produit_id = p["id"]
                break

        if produit_id is None:
            return None  # Produit non trouvé

        # Positions déjà occupées
        positions_occupees = [(x, y) for (_, x, y) in self.positions]

        # Rechercher une position valide libre
        for (x, y) in self.positions_valides:
            if (x, y) not in positions_occupees:
                return (produit_id, x, y)

        return None  # Aucune position libre trouvée
    
    
    def bouton_recherche_clicked(self):
        nom_recherche = self.vue.get_texte_recherche()  # Méthode de la vue à définir
        resultat = self.modele.rechercher_emplacement_libre(nom_recherche)

        if resultat is not None:
            produit_id, x, y = resultat
            self.modele.positions.append((produit_id, x, y))
            self.vue.ajouter_article(produit_id, x, y)  # Affiche le produit sur la grille
            self.vue.afficher_message(f"{nom_recherche} ajouté en ({x},{y})")
        else:
            self.vue.afficher_message("Produit introuvable ou plus de place.")
