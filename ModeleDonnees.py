import json

# -----------------------------------------------------------------------------
# --- class ModeleDonnees
# -----------------------------------------------------------------------------

class ModeleDonnees:
    def __init__(self, chemin_produits):
        self.chemin_produits = chemin_produits
        self.produits = self.charger_produits()
        self.positions = []  # Liste des produits placés avec coordonnées
        self.positions_valides = [
            (4, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0),
            (3, 1), (4, 1), (5, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1),
            (2, 2), (3, 2), (4, 2), (5,2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2), (35, 2), (36, 2), (37, 2), (38, 2), (39, 2), (40, 2), (41, 2), (42, 2), (43, 2), (44, 2), (45, 2), (46, 2), (47, 2), (48, 2), (49, 2), (50, 2), (51, 2), (52, 2), (53, 2), (54, 2), (55, 2), (56, 2), (57, 2),
            (1, 3), (2, 3), (3, 3), (4, 3), (35, 3), (36, 3), (37, 3), (38, 3), (39, 3), (40, 3), (41, 3), (42, 3), (43, 3), (44, 3), (45, 3), (46, 3), (47, 3), (48, 3), (49, 3), (50, 3), (51, 3), (52, 3), (53, 3), (54, 3), (55, 3), (56, 3), (57, 3),
            (1, 4), (2, 4), (3, 4), 
            (1, 5), (2, 5), (8, 5), (9, 5), (10, 5), (12, 5), (13, 5), (14, 5), (16, 5), (17, 5), (18, 5), (20, 5), (21, 5), (22, 5), (24, 5), (25, 5), (26, 5), (28, 5), (29, 5), (30, 5), (32, 5), (33, 5), (34, 5), (35, 5), (36, 5), (37, 5), (39, 5), (41, 5), (42, 5), (43, 5), (48, 5), (49, 5), (50, 5), (51, 5), (52, 5), (53, 5), (54, 5), (55, 5), (56, 5), (57, 5), (60, 5),
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            (1,24), (2,24), (4,24), (5,24), (6,24), (8,24), (9,24),(11,24), (12,24),(14,24),(15,24),(18,24),(21,24),(23,24),(24,24),(25,24),(27,24),(28,24),(30,24),(31,24),(33,24),(34,24),(35,24),(36,24),(39,24),(41,24),(42,24),(43,24), (49,24),(50,24),(51,24),(52,24),(53,24),(56,24),(57,24), (60,24),
            (1,25), (2,25), (4,25), (5,25), (6,25), (8,25), (9,25),(11,25), (12,25),(14,25),(15,25),(18,25),(21,25),(23,25),(24,25),(25,25),(27,25),(28,25),(30,25),(31,25),(33,25),(34,25),(35,25),(36,25),(39,25),(41,25),(42,25),(43,25), (60,25),
            (1,26), (2,26), (4,26), (5,26), (6,26), (8,26), (9,26),(11,26), (12,26),(14,26),(15,26),(18,26),(21,26),(23,26),(24,26),(25,26),(27,26),(28,26),(30,26),(31,26),(33,26),(34,26),(35,26),(36,26),(39,26),(41,26),(42,26),(43,26), (49,26),(50,26),(51,26),(52,26),(53,26),(56,26),(57,26),(60,26),
            (1,27), (2,27), (4,27), (5,27), (6,27), (8,27), (9,27),(11,27), (12,27),(14,27),(15,27),(18,27),(21,27),(23,27),(24,27),(25,27),(27,27),(28,27),(30,27),(31,27),(33,27),(34,27),(35,27),(36,27),(39,27),(41,27),(42,27),(43,27), (49,27),(50,27),(51,27),(52,27),(53,27),(56,27),(57,27),(60,27),
            (1,28), (2,28), (4,28), (5,28), (6,28), (8,28), (9,28),(11,28), (12,28),(14,28),(15,28),(18,28),(21,28),(23,28),(24,28),(25,28),(27,28),(28,28),(30,28),(31,28),(33,28),(34,28),(35,28),(36,28),(39,28),(41,28),(42,28),(43,28),(60,28),
            (1,29), (2,29), (4,29), (5,29), (6,29), (8,29), (9,29),(11,29), (12,29),(14,29),(15,29),(18,29),(21,29),(23,29),(24,29),(25,29),(27,29),(28,29),(30,29),(31,29),(33,29),(34,29),(35,29),(39,29),(41,29),(42,29),(43,29),(49,29),(50,29),(51,29),(52,29),(53,29),(56,29),(57,29),(60,29),
            (1,30),(2,30), (4,30), (5,30), (6,30), (23,30), (24,30), (25,30), (33,30), (36,30), (41,30), (42,30), (43,30), (49,30), (50,30), (51,30), (52,30), (53,30), (54,30), (55,30), (56,30), (57,30), (60,30),
            (1,31), (2,31), (4,31), (5,31), (6,31), (8,31), (9,31),(11,31), (12,31),(14,31),(15,31),(18,31),(21,31),(23,31),(24,31),(25,31),(27,31),(28,31),(30,31),(31,31),(33,31),(34,31),(35,31),(36,31),(39,31),(41,31),(42,31),(43,31),(60,31),
            (1,32), (2,32), (4,32), (5,32), (6,32), (8,32), (9,32),(11,32), (12,32),(14,32),(15,32),(18,32),(21,32),(23,32),(24,32),(25,32),(27,32),(28,32),(30,32),(31,32),(33,32),(34,32),(35,32),(36,32),(39,32),(41,32),(42,32),(43,32),(49,32),(50,32),(51,32),(52,32),(53,32),(56,32),(57,32),(60,32),
            (1,33), (2,33), (4,33), (5,33), (6,33), (8,33), (9,33),(11,33), (12,33),(14,33),(15,33),(18,33),(21,33),(23,33),(24,33),(25,33),(27,33),(28,33),(30,33),(31,33),(33,33),(36,33),(39,33),(41,33),(42,33),(43,33),(49,33),(50,33),(51,33),(52,33),(53,33),(56,33),(57,33),(60,33),
            (1,34), (2,34), (4,34), (5,34), (6,34), (8,34), (9,34),(11,34), (12,34),(14,34),(15,34),(18,34),(21,34),(23,34),(24,34),(25,34),(27,34),(28,34),(30,34),(31,34),(39,34),(41,34),(42,34),(43,34),(60,34),
            (1,35), (2,35), (4,35), (5,35), (6,35), (8,35), (9,35),(11,35), (12,35),(14,35),(15,35),(18,35),(21,35),(23,35),(24,35),(25,35),(27,35),(28,35),(30,35),(31,35),(39,35),(41,35),(42,35),(43,35),(49,35),(50,35),(51,35),(52,35),(53,35),(54,35),(56,35),(57,35),(60,35), 
            (1,36),(2,36), (4,36), (5,36), (6,36), (8,36), (9,36),(11,36), (12,36),(14,36),(15,36),(18,36),(21,36),(23,36),(24,36),(25,36),(27,36),(28,36),(30,36),(31,36),(39,36),(41,36),(42,36),(43,36),(49,36),(50,36),(51,36),(52,36),(53,36),(54,36),(56,36),(57,36),(60,36),
            (1,37), (2,37),(4,37), (5,37), (6,37), (8,37), (9,37),(11,37), (12,37),(14,37),(15,37),(18,37),(21,37),(23,37),(24,37),(25,37),(27,37),(28,37),(30,37),(31,37),(39,37),(41,37),(42,37),(43,37),(60,37),
            (1,38), (2,38), (49,38), (50,38), (51,38), (52,38), (53,38), (54,38), (55,38), (56,38), (57,38),(60,38),
            (1,39), (49,39), (50,39), (51,39), (52,39), (53,39), (54,39), (55,39), (56,39), (57,39),(60,39),
            (1,40), (2,40), (12,40), (13,40),(60,40),
            (1,41), (2,41),(12,41),(13,41),(49,41),(50,41),(51,41),(52,41),(53,41),(54,41),(55,41),(56,41),(57,41),(58,41),(59,41),(60,41),
            (1,42),(2, 42), (3, 42), (4, 42), (5, 42), (6, 42), (7, 42), (8, 42), (9, 42), (10, 42), (11, 42), (12, 42), (13, 42),
        ]

    def charger_produits(self):
        with open(self.chemin_produits, 'r', encoding='utf-8') as f:
            return json.load(f)

    def ajouter_position(self, produit, x, y):
        self.positions.append({
            'produit': produit,
            'x': x,
            'y': y
        })

    def supprimer_position(self, produit):
        self.positions = [p for p in self.positions if p['produit'] != produit]

    def exporter_positions(self, chemin='produits_positions.json'):
        with open(chemin, 'w', encoding='utf-8') as f:
            json.dump(self.positions, f, indent=4, ensure_ascii=False)

    def get_categories(self):
        return list(self.produits.keys())

    def get_produits_par_categorie(self, categorie):
        return self.produits.get(categorie, [])

    def get_produits_coordonne(self, x, y):
        return [p['produit'] for p in self.positions if p['x'] == x and p['y'] == y]

    def supprimer_produit_coordonne(self, produit, x, y):
        self.positions = [
            p for p in self.positions
            if not (p['produit'] == produit and p['x'] == x and p['y'] == y)
        ]

    def vider_case(self, x, y):
        self.positions = [p for p in self.positions if not (p['x'] == x and p['y'] == y)]